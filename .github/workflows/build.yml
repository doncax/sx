name: Build
 
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version: v(?)'
        required: true
        type: string
 
jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Delete
        uses: Mattraks/delete-workflow-runs@v2.0.6
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
 
  build:
    permissions: write-all
    needs: [clean]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - build: core
            goos: android
            goarch: arm
            cc: armv7a-linux-androideabi21
            cgo: 1
          - build: core
            goos: android
            goarch: arm64
            cc: aarch64-linux-android21
            cgo: 1
          - build: sfa
            platform: armeabi-v7a
          - build: sfa
            platform: arm64-v8a
 
    steps:
      - name: Set up repo
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
 
      - name: Set up go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ^1.25
          check-latest: true
 
      - name: Set up ndk
        uses: nttld/setup-ndk@v1.5.0
        id: setup-ndk
        with:
          ndk-version: r28c
          add-to-path: true
 
      - name: Set up version
        id: version
        run: |
          version="${{ inputs.version }}"
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "TIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV
 
      - name: Build core binaries
        if: matrix.build == 'core'
        env:
          TAGS: "with_gvisor,with_quic,with_dhcp,with_utls,with_clash_api"
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          CC=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.cc }}-clang \
          CGO_ENABLED=${{ matrix.cgo }} \
          GOOS=${{ matrix.goos }} \
          GOARCH=${{ matrix.goarch }} \
          go build -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION} ${TIME}' -s -w -buildid= -checklinkname=0" -tags ${TAGS} ./cmd/sing-box
 
      - name: Compress with upx
        if: matrix.build == 'core'
        run: |
          upx="$(curl --retry 5 --retry-all-errors -sL "https://github.com/upx/upx/releases$(curl --retry 5 --retry-all-errors -sL "https://github.com/upx/upx/releases$(curl --retry 5 --retry-all-errors -sL "https://github.com/upx/upx/releases/latest" | grep -Eo '/expanded_assets/[^\"]+')" | grep -Eo '/download/[^"]+amd64_linux[^"]+')" |tar xvJf - |grep '/upx$')"
          $upx --best ./sing-box
 
      - name: Upload core artifacts
        if: matrix.build == 'core'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sing-box-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: sing-box
          compression-level: 9
 
      - name: Set up SFA repository
        if: matrix.build == 'sfa'
        uses: actions/checkout@v5.0.0
        with:
          repository: SagerNet/sing-box-for-android
          path: sfa
          submodules: recursive
 
      - name: Set up java for SFA
        if: matrix.build == 'sfa'
        uses: actions/setup-java@v5.0.0
        with:
          distribution: 'oracle'
          java-version: 17
          check-latest: true
 
      - name: Set up sdk version for SFA
        if: matrix.build == 'sfa'
        id: sdk
        run: echo version=$(ls $ANDROID_HOME/build-tools | tail -n 1) >> $GITHUB_OUTPUT
 
      - name: Build SFA library
        if: matrix.build == 'sfa'
        env:
          TAGS: "with_gvisor,with_quic,with_dhcp,with_utls,with_clash_api"
          NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          mkdir -p sfa/app/libs/
          make lib_install
          CC=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.cc }}-clang
          CGO_ENABLED=0 gomobile bind -target=android/arm,android/arm64 -trimpath -androidapi 21 -javapkg=io.nekohasekai -libname=box -tags ${TAGS} -ldflags "-X github.com/sagernet/sing-box/constant.Version=${VERSION} -s -w -buildid= -checklinkname=0" ./experimental/libbox
          cp ./libbox.aar sfa/app/libs/
 
      - name: Build SFA APK
        if: matrix.build == 'sfa'
        run: |
          cd sfa
          echo "" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8 -XX:+UseParallelGC" >> gradle.properties
          echo "org.gradle.caching=true" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "VERSION_NAME=${VERSION}" > local.properties
          echo "VERSION_CODE=$(date +%Y%m%d%H)" >> local.properties
          sed -i '/signingConfigs\.release/d' app/build.gradle
          chmod +x ./gradlew
          ./gradlew assembleRelease
 
      - name: Sign SFA APK
        if: matrix.build == 'sfa'
        uses: PuerNya/sign-android-release@v2.0.4
        env:
          BUILD_TOOLS_VERSION: ${{steps.sdk.outputs.version}}
        with:
          releaseDirectory: sfa/app/build/outputs/apk/other/release
          signingKeyBase64: ${{ secrets.SIGN_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
 
      - name: Upload SFA artifacts
        if: matrix.build == 'sfa'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sfa-${{ env.VERSION }}-${{ matrix.platform }}
          path: sfa/app/build/outputs/apk/other/release/*-${{ matrix.platform }}-signed.apk
          compression-level: 9
 